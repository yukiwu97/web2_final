{"ast":null,"code":"var _jsxFileName = \"/Users/mengjiang/Desktop/yuki_webprogram/web2/web2_final/src/components/chart.component.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass Charts extends Component {\n  constructor(props) {\n    super(props); // this.state = {\n    //     data: props.datalist\n    // }\n\n    this.data = props.datalist;\n    this.month = props.month;\n    this.year = props.year;\n    this.total = 0;\n  }\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  getTotalNumber() {}\n\n  getClassifiedData() {\n    var countMap = {};\n    var retList = [];\n    var total = 0;\n    this.data.forEach(item => {\n      countMap[item.category] ? countMap[item.category] = countMap[item.category] + item.amount : countMap[item.category] = item.amount;\n      total = total + item.amount;\n    });\n    this.total = total;\n\n    for (var category in countMap) {\n      var count = countMap[category];\n      var percentage = count / total * 100;\n      retList.push({\n        \"name\": category,\n        \"count\": count,\n        \"percentage\": percentage.toFixed(2)\n      });\n    }\n\n    console.log(countMap);\n    console.log(retList);\n    return retList;\n  }\n\n  drawChart() {\n    const classifiedData = this.getClassifiedData();\n    console.log(this.data);\n    console.log(classifiedData);\n    const svgWidth = 1200;\n    const svgHeight = 600;\n    const margin = 50;\n    var pie = d3.pie().sort(null).value(d => d.value);\n    var radius = Math.min(svgWidth, svgHeight) / 2 - margin;\n    const pieSvg = d3.select(this.refs.pie).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight).append(\"g\").attr(\"transform\", \"translate(\" + svgWidth / 2 + \",\" + svgHeight / 2 + \")\"); // set the color scale\n\n    var color = d3.scaleOrdinal().domain(classifiedData).range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]);\n    var data_ready = pie(classifiedData); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    pieSvg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(100) // This is the size of the donut hole\n    .outerRadius(radius)).attr('fill', function (d) {\n      return color(d.data.key);\n    }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    pieSvg.append(\"text\").attr(\"text-anchor\", \"middle\").text(\"$\" + this.total.toFixed(2));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pie_chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"Expenses Summary\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show_year_month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, \"YEAR: \", this.year == '0' ? 'All' : this.year), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, \"MONTH: \", this.month == '0' ? 'All' : this.month)), /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"pie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Charts;","map":{"version":3,"sources":["/Users/mengjiang/Desktop/yuki_webprogram/web2/web2_final/src/components/chart.component.js"],"names":["React","Component","d3","Charts","constructor","props","data","datalist","month","year","total","componentDidMount","drawChart","getTotalNumber","getClassifiedData","countMap","retList","forEach","item","category","amount","count","percentage","push","toFixed","console","log","classifiedData","svgWidth","svgHeight","margin","pie","sort","value","d","radius","Math","min","pieSvg","select","refs","append","attr","color","scaleOrdinal","domain","range","data_ready","selectAll","enter","arc","innerRadius","outerRadius","key","style","text","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\n\nclass Charts extends Component {\n    constructor(props) {\n        super(props);\n\n        // this.state = {\n        //     data: props.datalist\n        // }\n\n        this.data = props.datalist;\n        this.month = props.month;\n        this.year = props.year;\n        this.total = 0;\n    }\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    getTotalNumber() {\n\n\n    }\n\n    getClassifiedData() {\n        var countMap = {};\n        var retList = [];\n        var total = 0;\n        this.data.forEach(item => {\n            countMap[item.category] ? \n                (countMap[item.category] = countMap[item.category] + item.amount) : \n                (countMap[item.category] = item.amount);\n            total = total + item.amount;\n        });\n        this.total = total;\n        for (var category in countMap) {\n            var count = countMap[category];\n            var percentage = (count / total) * 100;\n            retList.push({\"name\": category, \"count\": count, \"percentage\" : percentage.toFixed(2)})\n        }\n        console.log(countMap);\n        console.log(retList);\n        return retList;\n    }\n\n    drawChart() {\n        const classifiedData = this.getClassifiedData();\n        console.log(this.data);\n        console.log(classifiedData);\n        const svgWidth = 1200;\n        const svgHeight = 600;\n        const margin = 50;\n\n        var pie = d3.pie().sort(null).value(d => d.value);\n\n        var radius = Math.min(svgWidth, svgHeight) / 2 - margin;\n\n        const pieSvg = d3.select(this.refs.pie)\n            .append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight)\n            .append(\"g\").attr(\"transform\", \"translate(\" + svgWidth / 2 + \",\" + svgHeight / 2 + \")\");\n\n        // set the color scale\n        var color = d3.scaleOrdinal()\n        .domain(classifiedData)\n        .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\n\nvar data_ready = pie(classifiedData)\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\npieSvg\n.selectAll('whatever')\n.data(data_ready)\n.enter()\n.append('path')\n.attr('d', d3.arc()\n  .innerRadius(100)         // This is the size of the donut hole\n  .outerRadius(radius)\n)\n.attr('fill', function(d){ return(color(d.data.key)) })\n.attr(\"stroke\", \"black\")\n.style(\"stroke-width\", \"2px\")\n.style(\"opacity\", 0.7)\n\npieSvg.append(\"text\")\n.attr(\"text-anchor\", \"middle\")\n.text(\"$\" + this.total.toFixed(2));\n        \n    }\n    \n    render() {\n        return(\n        <div className=\"pie_chart\">\n            <h1>Expenses Summary</h1>\n            <div className=\"show_year_month\">\n                <span>YEAR: {this.year == '0' ? 'All' : this.year}</span>\n                <span>MONTH: {this.month == '0' ? 'All' : this.month}</span>\n            </div>\n            <div ref=\"pie\"></div>\n        </div>\n        )\n    }\n}\nexport default Charts;"]},"metadata":{},"sourceType":"module"}