{"ast":null,"code":"var _jsxFileName = \"/Users/mengjiang/Desktop/yuki_webprogram/web2/web2_final/src/components/chart.component.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass Charts extends Component {\n  constructor(props) {\n    super(props); // this.state = {\n    //     data: props.datalist\n    // }\n\n    this.data = props.datalist;\n    this.month = props.month;\n    this.year = props.year;\n    this.total = 0;\n  }\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  getClassifiedData() {\n    var countMap = {};\n    var retList = [];\n    var total = 0;\n    this.data.forEach(item => {\n      countMap[item.category] ? countMap[item.category] = countMap[item.category] + item.amount : countMap[item.category] = item.amount;\n      total = total + item.amount;\n    });\n    this.total = total;\n\n    for (var category in countMap) {\n      var count = countMap[category];\n      var percentage = count / total * 100;\n      retList.push({\n        \"name\": category,\n        \"count\": count.toFixed(2),\n        \"percentage\": percentage.toFixed(2)\n      });\n    }\n\n    return retList;\n  }\n\n  drawChart() {\n    const classifiedData = this.getClassifiedData();\n    console.log(this.data);\n    console.log(classifiedData);\n    const svgWidth = 600;\n    const svgHeight = 600;\n    const margin = 10;\n    var pie = d3.pie().sort(null).value(d => d.count);\n    var radius = Math.min(svgWidth, svgHeight) / 2 - margin;\n    const pieSvg = d3.select(this.refs.pie).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight).append(\"g\").attr(\"transform\", \"translate(\" + svgWidth / 2 + \",\" + svgHeight / 2 + \")\"); // set the color scale\n\n    var color = d3.scaleOrdinal().domain(classifiedData.map(d => d.name)).range(d3.quantize(t => d3.interpolateSpectral(t * 0.6 + 0.1), classifiedData.length).reverse());\n    var arc = d3.arc().innerRadius(100) // This is the size of the donut hole\n    .outerRadius(radius);\n    var data_ready = pie(classifiedData); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n    pieSvg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', arc).attr('fill', function (d) {\n      return color(d.data.name);\n    }).attr(\"stroke\", \"white\");\n    pieSvg.append(\"text\").attr(\"text-anchor\", \"middle\").text(\"$\" + this.total.toFixed(2));\n  }\n\n  getMonth(num) {\n    const monthMap = {\n      \"0\": 'ALL',\n      \"1\": \"January\",\n      \"2\": \"February\",\n      \"3\": \"March\",\n      \"4\": \"April\",\n      \"5\": \"May\",\n      \"6\": \"June\",\n      \"7\": \"July\",\n      \"8\": \"August\",\n      \"9\": \"September\",\n      \"10\": \"October\",\n      \"11\": \"November\",\n      \"12\": \"December\"\n    };\n    return monthMap[num];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pie_chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Expenses Summary\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show_year_month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, \"YEAR: \\xA0 \", parseInt(this.year) === 0 ? 'All' : this.year), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"MONTH: \\xA0 \", this.getMonth(this.month))), /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"pie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Charts;","map":{"version":3,"sources":["/Users/mengjiang/Desktop/yuki_webprogram/web2/web2_final/src/components/chart.component.js"],"names":["React","Component","d3","Charts","constructor","props","data","datalist","month","year","total","componentDidMount","drawChart","getClassifiedData","countMap","retList","forEach","item","category","amount","count","percentage","push","toFixed","classifiedData","console","log","svgWidth","svgHeight","margin","pie","sort","value","d","radius","Math","min","pieSvg","select","refs","append","attr","color","scaleOrdinal","domain","map","name","range","quantize","t","interpolateSpectral","length","reverse","arc","innerRadius","outerRadius","data_ready","selectAll","enter","text","getMonth","num","monthMap","render","parseInt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\n\nclass Charts extends Component {\n    constructor(props) {\n        super(props);\n\n        // this.state = {\n        //     data: props.datalist\n        // }\n\n        this.data = props.datalist;\n        this.month = props.month;\n        this.year = props.year;\n        this.total = 0;\n    }\n\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    getClassifiedData() {\n        var countMap = {};\n        var retList = [];\n        var total = 0;\n        this.data.forEach(item => {\n            countMap[item.category] ? \n                (countMap[item.category] = countMap[item.category] + item.amount) : \n                (countMap[item.category] = item.amount);\n            total = total + item.amount;\n        });\n        this.total = total;\n        for (var category in countMap) {\n            var count = countMap[category];\n            var percentage = (count / total) * 100;\n            retList.push({\"name\": category, \"count\": count.toFixed(2), \"percentage\" : percentage.toFixed(2)})\n        }\n        return retList;\n    }\n\n    drawChart() {\n        const classifiedData = this.getClassifiedData();\n        console.log(this.data);\n        console.log(classifiedData);\n        const svgWidth = 600;\n        const svgHeight = 600;\n        const margin = 10;\n\n        var pie = d3.pie().sort(null).value(d => d.count);\n\n        var radius = Math.min(svgWidth, svgHeight) / 2 - margin;\n\n        const pieSvg = d3.select(this.refs.pie)\n            .append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight)\n            .append(\"g\").attr(\"transform\", \"translate(\" + svgWidth / 2 + \",\" + svgHeight / 2 + \")\");\n\n        // set the color scale\n        var color = d3.scaleOrdinal()\n            .domain(classifiedData.map(d => d.name))\n            .range(d3.quantize(t => d3.interpolateSpectral(t * 0.6 + 0.1), classifiedData.length).reverse());\n\n        var arc = d3.arc()\n            .innerRadius(100)         // This is the size of the donut hole\n            .outerRadius(radius)\n\nvar data_ready = pie(classifiedData)\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\npieSvg\n.selectAll('whatever')\n.data(data_ready)\n.enter()\n.append('path')\n.attr('d', arc)\n.attr('fill', function(d){ return(color(d.data.name))}) \n.attr(\"stroke\", \"white\")\n\npieSvg.append(\"text\")\n.attr(\"text-anchor\", \"middle\")\n.text(\"$\" + this.total.toFixed(2));\n        \n    }\n    getMonth(num) {\n        const monthMap = {\"0\":'ALL', \"1\":\"January\", \"2\":\"February\", \"3\":\"March\", \"4\":\"April\", \"5\":\"May\", \"6\":\"June\",\n            \"7\":\"July\", \"8\":\"August\", \"9\":\"September\", \"10\":\"October\", \"11\":\"November\", \"12\":\"December\"};\n        return monthMap[num];\n    }\n    render() {\n        return(\n        <div className=\"pie_chart\">\n            <h1>Expenses Summary</h1>\n            <div className=\"show_year_month\">\n                <span>YEAR: &nbsp; {parseInt(this.year) === 0 ? 'All' : this.year}</span>\n                <span>MONTH: &nbsp; {this.getMonth(this.month)}</span>\n            </div>\n            <div ref=\"pie\"></div>\n        </div>\n        )\n    }\n}\nexport default Charts;"]},"metadata":{},"sourceType":"module"}